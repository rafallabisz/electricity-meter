{"version":3,"sources":["assets/background.jpg","components/Dashboard.tsx","assets/electricity-meter.jpg","components/ElectricityMeter.tsx","routes/index.ts","components/Navbar.tsx","App.tsx","reportWebVitals.ts","index.tsx","App.module.scss"],"names":["getWeekDays","weekStart","days","i","push","moment","add","toDate","getWeekRange","date","from","startOf","to","endOf","echarts","TitleComponent","TooltipComponent","GridComponent","BarChart","CanvasRenderer","ToolboxComponent","LegendComponent","values","data","Dashboard","props","currentWeek","Date","useState","selectedDays","setSelectedDays","startDate","format","useEffect","option","app","chartDom","document","getElementById","myChart","xAxisSeries","map","dataSeries","filter","value","console","log","configParameters","rotate","min","max","align","options","left","center","right","verticalAlign","top","middle","bottom","position","reduce","pos","distance","config","onChange","labelOption","normal","setOption","series","label","show","formatter","fontSize","rich","name","title","textStyle","color","text","length","tooltip","trigger","axisPointer","type","legend","toolbox","orient","feature","mark","dataView","readOnly","magicType","restore","saveAsImage","xAxis","axisTick","yAxis","barGap","emphasis","focus","className","styles","mainWrap","style","background","Background","Container","Row","Col","showOutsideDays","onDayClick","onWeekClick","weekNumber","e","localeUtils","MomentLocaleUtils","locale","calendarBgc","id","height","ElectricityMeter","currentConsumption","setCurrentConsumption","nightZone","setNightZone","timer","setInterval","getRndInteger","clearInterval","Math","random","src","ElectricityMeterIcon","alt","width","containerData","toFixed","zoneContainer","onClick","Switch","checked","prev","onColor","onHandleColor","handleDiameter","uncheckedIcon","checkedIcon","boxShadow","activeBoxShadow","routes","main","dashboard","Navbar","activeClassName","App","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","module","exports"],"mappings":"2PAAe,MAA0B,uC,2JC6ClC,SAASA,EAAYC,GAE1B,IADA,IAAMC,EAAO,CAACD,GACLE,EAAI,EAAGA,EAAI,EAAGA,GAAK,EAC1BD,EAAKE,KAAKC,IAAOJ,GAAWK,IAAIH,EAAG,QAAQI,UAE7C,OAAOL,EAGF,SAASM,EAAaC,GAC3B,MAAO,CACLC,KAAML,IAAOI,GAAME,QAAQ,QAAQJ,SACnCK,GAAIP,IAAOI,GAAMI,MAAM,QAAQN,UA1BnCO,IAAY,CACVC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,MAuBF,IAAMC,EAAS,CAAC,CAACb,KAAK,aAAcc,KAAK,CAAC,OAAQ,CAACd,KAAK,aAAcc,KAAK,CAAC,IAAM,KAAM,IAAK,IAAM,KAAK,KAAK,OAAO,CAACd,KAAK,aAAcc,KAAK,CAAC,IAAM,IAAK,KAAM,IAAK,IAAI,KAAK,QAkP9JC,EAhP6B,SAACC,GAC3C,IAAMC,EAAc1B,EAAYQ,EAAa,IAAImB,MAAQjB,MADJ,EAEbkB,mBAAiBF,GAFJ,mBAE9CG,EAF8C,KAEhCC,EAFgC,KAG/CC,EAAY1B,IAAOwB,EAAa,IAAIG,OAAO,cAsNjD,OA3MAC,qBAAU,WACR,IAWIC,EAXAC,EAAW,GACTC,EAAWC,SAASC,eAAe,QACnCC,EAAUzB,IAAasB,GAEvBI,EAAcX,EAAaY,KAAI,SAAAhC,GAAI,OAAGJ,IAAOI,GAAMuB,OAAO,iBAE1DU,EAAapB,EAAOqB,QAAO,SAAAC,GAAK,OAAGA,EAAMnC,OAASsB,KAExDc,QAAQC,IAAIJ,EAAW,cAqBvBP,EAAIY,iBAAmB,CACrBC,OAAQ,CACNC,KAAM,GACNC,IAAK,IAEPC,MAAO,CACLC,QAAS,CACPC,KAAM,OACNC,OAAQ,SACRC,MAAO,UAGXC,cAAe,CACbJ,QAAS,CACPK,IAAK,MACLC,OAAQ,SACRC,OAAQ,WAGZC,SAAU,CACRR,QApCY,CACd,OACA,QACA,MACA,SACA,SACA,YACA,aACA,cACA,eACA,gBACA,iBACA,mBACA,qBAuBmBS,QAAO,SAAUpB,EAAUqB,GAE1C,OADArB,EAAIqB,GAAOA,EACJrB,IACN,KAELsB,SAAU,CACRd,IAAK,EACLC,IAAK,MAKTf,EAAI6B,OAAS,CACXhB,OAAQ,GACRG,MAAO,OACPK,cAAe,SACfI,SAAU,eACVG,SAAU,GACVE,SAAU,WACR,IAAIC,EAAc,CAChBC,OAAQ,CACNnB,OAAQb,EAAI6B,OAAOhB,OACnBG,MAAOhB,EAAI6B,OAAOb,MAClBK,cAAerB,EAAI6B,OAAOR,cAC1BI,SAAUzB,EAAI6B,OAAOJ,SACrBG,SAAU5B,EAAI6B,OAAOD,WAGzBxB,EAAQ6B,UAAU,CAChBC,OAAQ,CACN,CACEC,MAAOJ,GAET,CACEI,MAAOJ,GAET,CACEI,MAAOJ,GAET,CACEI,MAAOJ,QAOjB,IAAMA,EAAc,CAClBK,MAAM,EACNX,SAAUzB,EAAI6B,OAAOJ,SACrBG,SAAU5B,EAAI6B,OAAOD,SACrBZ,MAAOhB,EAAI6B,OAAOb,MAClBK,cAAerB,EAAI6B,OAAOR,cAC1BR,OAAQb,EAAI6B,OAAOhB,OACnBwB,UAAW,kBACXC,SAAU,GACVC,KAAM,CACJC,KAAM,MAIVzC,EAAS,CACP0C,MAAO,CAELC,UAAW,CACTC,MAAO,OACPL,SAAU,IAEZM,KAAQrC,EAAWsC,OAAQ,8CAA+B,cAC1D3B,KAAM,SACNI,IAAK,OAEPwB,QAAS,CACPC,QAAS,OACTC,YAAa,CACXC,KAAM,WAGVC,OAAQ,CAEN1B,OAAQ,KAEV2B,QAAS,CACPf,MAAM,EACNgB,OAAQ,WACRlC,KAAM,QACNI,IAAK,SACL+B,QAAS,CACPC,KAAM,CAAElB,MAAM,GACdmB,SAAU,CAAEnB,MAAM,EAAMoB,UAAU,GAClCC,UAAW,CAAErB,MAAM,EAAMa,KAAM,CAAC,OAAQ,MAAO,QAAS,UACxDS,QAAS,CAAEtB,MAAM,GACjBuB,YAAa,CAAEvB,MAAM,KAGzBwB,MAAO,CACL,CACEX,KAAM,WACNY,SAAU,CAAEzB,MAAM,GAClBhD,KAAMiB,IAIVyD,MAAO,CACL,CACEb,KAAM,UAGVf,OAAQ,CACN,CACIM,KAAM,WACNS,KAAM,MACNc,OAAQ,EACR5B,MAAOJ,EACPiC,SAAU,CACNC,MAAO,UAEX7E,KAAMmB,EAAW,GAAIA,EAAW,GAAGnB,KAAK,QAiCtCgB,EAAQ6B,UAAUlC,GAAQ,KAEpC,CAACL,EAAcE,IAEf,sBAAMsE,UAAWC,IAAOC,SAAUC,MAAO,CAACC,WAAW,OAAD,OAAQC,EAAR,MAApD,SACE,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,WACA,wCACA,mDACA,cAAC,IAAD,CACEC,iBAAe,EACfjF,aAAcA,EACdkF,WA9Nc,SAACtG,GACvBqB,EAAgB9B,EAAYQ,EAAaC,GAAMC,QA8NvCsG,YA3Nc,SAACC,EAAoB/G,EAAcgH,GACzDpF,EAAgB5B,IA2NRiH,YAAaC,IAAmBC,OAAQ,KACxChB,UAAWC,IAAOgB,cAEpB,qBAAKC,GAAG,OAAOf,MAAO,CAAEgB,OAAQ,qBCtS3B,MAA0B,8C,kBCSzCnH,IAAOgH,OAAO,MAMd,IAiGeI,EAjG2C,SAAChG,GAAU,MAGhBG,mBAAS,KAHO,mBAG5D8F,EAH4D,KAGzCC,EAHyC,OAIpC/F,oBAAS,GAJ2B,mBAI5DgG,EAJ4D,KAIlDC,EAJkD,KAMnE5F,qBAAU,WAER,IAEM6F,EAAQC,aAAY,kBAAKJ,EAAsBK,EAFpC,GACA,MACsE,KACtF,OAAO,WACLC,cAAcH,MAEjB,CAACJ,IAEH,IAAMM,EAAgB,SAAC/E,EAAYC,GACjC,OAAOgF,KAAKC,UAAYjF,EAAMD,EAAM,KAOtC,OACE,sBAAMoD,UAAWC,IAAOC,SAAUC,MAAO,CAACC,WAAW,OAAD,OAAQC,EAAR,MAApD,SACE,cAACC,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,WACE,eAACC,EAAA,EAAD,WACJ,0CAAY,oDACZ,8BACE,qBAAKuB,IAAKC,EAAsBC,IAAI,qBAAgBC,MAAO,WAG7D,cAAC1B,EAAA,EAAD,UAEE,0BAASR,UAAWC,IAAOkC,cAA3B,UACA,gCACA,sBAAMnC,UAAWC,IAAO1B,MAAxB,oBAA4C,yCAAUvE,MAAS2B,OAAO,KAA1B,YAAkC3B,MAAS2B,OAAO,aAG9F,gCACA,sBAAMqE,UAAWC,IAAO1B,MAAxB,wBAAgD,+DAGhD,gCACA,sBAAMyB,UAAWC,IAAO1B,MAAxB,yBAAiD,yDAGjD,gCACA,sBAAMyB,UAAWC,IAAO1B,MAAxB,0BAAkD,oDAGlD,gCACA,sBAAMyB,UAAWC,IAAO1B,MAAxB,wBAAgD,wDAGhD,gCACA,sBAAMyB,UAAWC,IAAO1B,MAAxB,qBAA6C,0CAG7C,gCACA,sBAAMyB,UAAWC,IAAO1B,MAAxB,oCAAuD,yCAAU8C,EAAmBe,QAAQ,GAArC,kBAEvD,gCACA,sBAAMpC,UAAWC,IAAO1B,MAAxB,uDAAqE,oDAErE,gCACA,sBAAMyB,UAAWC,IAAO1B,MAAxB,wDAAsE,oDAGtE,sBAAKyB,UAAWC,IAAOoC,cAAvB,UACE,sBAAMC,QAAS,kBAAId,GAAa,IAAhC,4BACF,cAACe,EAAA,EAAD,CACIC,QAASjB,EACT3D,SAvDiB,WAC7B4D,GAAa,SAAAiB,GAAI,OAAGA,MAuDRC,QAAQ,UACRC,cAAc,UACdC,eAAgB,GAChBC,eAAe,EACfC,aAAa,EACbC,UAAU,iCACVC,gBAAgB,sCAChB7B,OAAQ,GACRe,MAAO,GACPlC,UAAU,eACVkB,GAAG,oBAEL,sBAAMoB,QAAS,kBAAId,GAAa,IAAhC,0C,iBCjGKyB,EALA,CACbC,KAAM,qBACNC,UAAW,cCoBEC,G,OAlBU,WACvB,OACE,qBAAKpD,UAAS,6BAAd,SACE,qBAAIA,UAAU,sBAAd,UACE,oBAAIA,UAAU,kBAAd,SACE,cAAC,IAAD,CAASzF,GAAI0I,EAAOC,KAAMlD,UAAU,WAAWqD,gBAAgB,aAA/D,uBAIF,oBAAIrD,UAAU,kBAAd,SACE,cAAC,IAAD,CAASzF,GAAI0I,EAAOE,UAAWnD,UAAU,WAAWqD,gBAAgB,aAApE,8BC2GKC,EA9GiB,SAAClI,GAI/B,OACE,eAAC,IAAD,WACE,cAAC,EAAD,IACF,eAAC,IAAD,WACE,cAAC,IAAD,CAAOmI,OAAK,EAACC,KAAMP,EAAOC,KAAMO,UAAWrC,IAC3C,cAAC,IAAD,CAAOmC,OAAK,EAACC,KAAMP,EAAOE,UAAWM,UAAWtI,WCPvCuI,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFrI,SAASC,eAAe,SAM1ByH,K,mBCfAY,EAAOC,QAAU,CAAC,SAAW,sBAAsB,MAAQ,mBAAmB,cAAgB,2BAA2B,cAAgB,2BAA2B,YAAc,4B","file":"static/js/main.89c612a7.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/background.3b070342.jpg\";","import { Container, Row, Col } from \"react-bootstrap\";\r\nimport styles from '../App.module.scss';\r\nimport Background from '../assets/background.jpg'\r\nimport React, { useEffect, useState } from 'react';\r\n// Include the locale utils designed for moment\r\nimport * as echarts from 'echarts/core';\r\n// Import bar charts, all with Chart suffix\r\nimport { BarChart, BarSeriesOption, LineSeriesOption } from 'echarts/charts';\r\n// import the tooltip, title, and rectangular coordinate system components, all suffixed with Component\r\nimport {\r\n  TitleComponent,\r\n  TooltipComponent,\r\n  GridComponent,\r\n  GridComponentOption,\r\n  TitleComponentOption,\r\n  ToolboxComponent,\r\n  LegendComponent,\r\n} from 'echarts/components';\r\n// Import the Canvas renderer, note that introducing the CanvasRenderer or SVGRenderer is a required step\r\nimport { CanvasRenderer } from 'echarts/renderers';\r\nimport DayPicker from \"react-day-picker\";\r\nimport MomentLocaleUtils from 'react-day-picker/moment';\r\nimport 'moment/locale/pl';\r\nimport 'react-day-picker/lib/style.css';\r\nimport moment from 'moment';\r\n\r\n// Combine an Option type with only required components and charts via ComposeOption\r\ntype ECOption = echarts.ComposeOption<BarSeriesOption | LineSeriesOption | TitleComponentOption | GridComponentOption>;\r\n\r\n// Register the required components\r\necharts.use([\r\n  TitleComponent,\r\n  TooltipComponent,\r\n  GridComponent,\r\n  BarChart,\r\n  CanvasRenderer,\r\n  ToolboxComponent,\r\n  LegendComponent,\r\n]);\r\n\r\n\r\ninterface DashboardProps {\r\n  \r\n}\r\n\r\nexport function getWeekDays(weekStart: Date) {\r\n  const days = [weekStart];\r\n  for (let i = 1; i < 7; i += 1) {\r\n    days.push(moment(weekStart).add(i, 'days').toDate());\r\n  }\r\n  return days;\r\n}\r\n\r\nexport function getWeekRange(date: Date) {\r\n  return {\r\n    from: moment(date).startOf('week').toDate(),\r\n    to: moment(date).endOf('week').toDate(),\r\n  };\r\n}\r\n\r\nconst values = [{date:'17-05-2021', data:[2.15]}, {date:'10-05-2021', data:[1.10, 2.75, 1.1, 0.82, 1.41,2.18,2.01]},{date:'03-05-2021', data:[0.85, 1.1, 1.05, 1.4, 1.1,2.98,2.01]}]\r\n\r\nconst Dashboard: React.FC<DashboardProps> = (props) => {\r\n  const currentWeek = getWeekDays(getWeekRange(new Date()).from);\r\n  const [selectedDays, setSelectedDays] = useState<Date[]>(currentWeek);\r\n  const startDate = moment(selectedDays[0]).format('DD-MM-YYYY');\r\n\r\n  const handleDayChange = (date: Date) => {\r\n    setSelectedDays(getWeekDays(getWeekRange(date).from));\r\n  };\r\n\r\n  const handleWeekClick = (weekNumber: number, days: Date[], e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\r\n    setSelectedDays(days);\r\n  };\r\n\r\n\r\n  useEffect(()=>{\r\n    let app: any = {};\r\n    const chartDom = document.getElementById('main')!;\r\n    const myChart = echarts.init(chartDom);\r\n\r\n    const xAxisSeries = selectedDays.map(date=> moment(date).format('DD-MM-YYYY'));\r\n\r\n    const dataSeries = values.filter(value=> value.date === startDate);    \r\n\r\n    console.log(dataSeries,'dataSeries');\r\n    \r\n\r\n    let option: ECOption;\r\n\r\n    const posList = [\r\n      'left',\r\n      'right',\r\n      'top',\r\n      'bottom',\r\n      'inside',\r\n      'insideTop',\r\n      'insideLeft',\r\n      'insideRight',\r\n      'insideBottom',\r\n      'insideTopLeft',\r\n      'insideTopRight',\r\n      'insideBottomLeft',\r\n      'insideBottomRight',\r\n    ];\r\n\r\n    app.configParameters = {\r\n      rotate: {\r\n        min: -90,\r\n        max: 90,\r\n      },\r\n      align: {\r\n        options: {\r\n          left: 'left',\r\n          center: 'center',\r\n          right: 'right',\r\n        },\r\n      },\r\n      verticalAlign: {\r\n        options: {\r\n          top: 'top',\r\n          middle: 'middle',\r\n          bottom: 'bottom',\r\n        },\r\n      },\r\n      position: {\r\n        options: posList.reduce(function (map: any, pos) {\r\n          map[pos] = pos;\r\n          return map;\r\n        }, {}),\r\n      },\r\n      distance: {\r\n        min: 0,\r\n        max: 100,\r\n      },\r\n    };\r\n\r\n    //config\r\n    app.config = {\r\n      rotate: 90,\r\n      align: 'left',\r\n      verticalAlign: 'middle',\r\n      position: 'insideBottom',\r\n      distance: 15,\r\n      onChange: function () {\r\n        var labelOption = {\r\n          normal: {\r\n            rotate: app.config.rotate,\r\n            align: app.config.align,\r\n            verticalAlign: app.config.verticalAlign,\r\n            position: app.config.position,\r\n            distance: app.config.distance,\r\n          },\r\n        };\r\n        myChart.setOption({\r\n          series: [\r\n            {\r\n              label: labelOption,\r\n            },\r\n            {\r\n              label: labelOption,\r\n            },\r\n            {\r\n              label: labelOption,\r\n            },\r\n            {\r\n              label: labelOption,\r\n            },\r\n          ],\r\n        });\r\n      },\r\n    };\r\n\r\n    const labelOption = {\r\n      show: true,\r\n      position: app.config.position,\r\n      distance: app.config.distance,\r\n      align: app.config.align,\r\n      verticalAlign: app.config.verticalAlign,\r\n      rotate: app.config.rotate,\r\n      formatter: '{c}  {name|{a}}',\r\n      fontSize: 16,\r\n      rich: {\r\n        name: {},\r\n      },\r\n    };\r\n\r\n    option = {\r\n      title: {\r\n        // show: !!!dashboardFlatData?.length,\r\n        textStyle: {\r\n          color: 'gray',\r\n          fontSize: 18,\r\n        },\r\n        text: !!dataSeries.length? 'Średnie zużycie w ciągu dnia':\"Brak danych\", \r\n        left: 'center',\r\n        top: 'top',\r\n      },\r\n      tooltip: {\r\n        trigger: 'axis',\r\n        axisPointer: {\r\n          type: 'shadow',\r\n        },\r\n      },\r\n      legend: {\r\n        // data: ['05.05.2021','06.05.2021','07.05.2021','08.05.2021','09.05.2021','10.05.2021','11.05.2021'],\r\n        bottom: '0',\r\n      },\r\n      toolbox: {\r\n        show: false,\r\n        orient: 'vertical',\r\n        left: 'right',\r\n        top: 'center',\r\n        feature: {\r\n          mark: { show: true },\r\n          dataView: { show: true, readOnly: false },\r\n          magicType: { show: true, type: ['line', 'bar', 'stack', 'tiled'] },\r\n          restore: { show: true },\r\n          saveAsImage: { show: true },\r\n        },\r\n      },\r\n      xAxis: [\r\n        {\r\n          type: 'category',\r\n          axisTick: { show: false },\r\n          data: xAxisSeries,\r\n          // data: ['05.05.2021','06.05.2021','07.05.2021','08.05.2021','09.05.2021','10.05.2021','11.05.2021'],\r\n        },\r\n      ],\r\n      yAxis: [\r\n        { \r\n          type: 'value',\r\n        },\r\n      ],\r\n      series: [\r\n        {\r\n            name: 'kWh/doba',\r\n            type: 'bar',\r\n            barGap: 0,\r\n            label: labelOption,\r\n            emphasis: {\r\n                focus: 'series'\r\n            },\r\n            data: dataSeries[0]? dataSeries[0].data:[]\r\n            // data: [2.15, 1.75, 2.34, 2.82, 2.41,2.22,2.17]\r\n        },\r\n        // {\r\n        //     name: 'Steppe',\r\n        //     type: 'bar',\r\n        //     label: labelOption,\r\n        //     emphasis: {\r\n        //         focus: 'series'\r\n        //     },\r\n        //     data: [220, 182, 191, 234, 290]\r\n        // },\r\n        // {\r\n        //     name: 'Desert',\r\n        //     type: 'bar',\r\n        //     label: labelOption,\r\n        //     emphasis: {\r\n        //         focus: 'series'\r\n        //     },\r\n        //     data: [150, 232, 201, 154, 190]\r\n        // },\r\n        // {\r\n        //     name: 'Wetland',\r\n        //     type: 'bar',\r\n        //     label: labelOption,\r\n        //     emphasis: {\r\n        //         focus: 'series'\r\n        //     },\r\n        //     data: [98, 77, 101, 99, 40]\r\n        // }\r\n    ]\r\n    };\r\n\r\n    option && myChart.setOption(option, true);\r\n\r\n  },[selectedDays, startDate])\r\n  return (\r\n    <main className={styles.mainWrap} style={{background:`url(${Background})`}}>\r\n      <Container>\r\n        <Row>\r\n          <Col>\r\n          <h3>Wykres</h3>\r\n          <h6>Wybierz datę</h6>\r\n          <DayPicker\r\n            showOutsideDays\r\n            selectedDays={selectedDays}\r\n            onDayClick={handleDayChange}\r\n            onWeekClick={handleWeekClick}\r\n            localeUtils={MomentLocaleUtils} locale={'pl'}\r\n            className={styles.calendarBgc}\r\n          />\r\n          <div id=\"main\" style={{ height: '500px' }}></div>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </main>\r\n  )\r\n}\r\n\r\nexport default Dashboard","export default __webpack_public_path__ + \"static/media/electricity-meter.38beccaa.jpg\";","import React, { useEffect, useState } from \"react\";\r\nimport { Col, Container, Row } from \"react-bootstrap\";\r\nimport ElectricityMeterIcon from '../assets/electricity-meter.jpg';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport styles from '../App.module.scss';\r\nimport moment from \"moment\";\r\nimport 'moment/locale/pl'\r\nimport Background from '../assets/background.jpg'\r\nimport Switch from \"react-bootstrap/esm/Switch\";\r\nmoment.locale('pl');\r\n\r\ninterface ElectricityMeterProps {\r\n  \r\n}\r\n\r\nconst ElectricityMeter: React.FC<ElectricityMeterProps> = (props) => {\r\n  // const [date,setDate]=useState(new Date());\r\n\r\n  const [currentConsumption,setCurrentConsumption] = useState(0.85);\r\n  const [nightZone,setNightZone]=useState(false);\r\n\r\n  useEffect(()=>{\r\n      // const timer = setInterval(()=> setDate(new Date()),1000);\r\n    const minRange = 0.2;\r\n    const maxRange = 2;\r\n    const timer = setInterval(()=> setCurrentConsumption(getRndInteger(minRange,maxRange)),1000)\r\n     return function cleanup(){\r\n       clearInterval(timer)\r\n     } \r\n  },[currentConsumption])\r\n\r\n  const getRndInteger = (min:number, max:number) => {\r\n    return Math.random() * (max - min + 0.5);\r\n  }\r\n\r\n  const handleChangeSwitch = ()=>{\r\nsetNightZone(prev=>!prev)\r\n  }\r\n\r\n  return (\r\n    <main className={styles.mainWrap} style={{background:`url(${Background})`}}>\r\n      <Container>\r\n        <Row>\r\n          <Col>\r\n      <h5>Licznik <b>V705048953698419</b></h5>\r\n      <div>\r\n        <img src={ElectricityMeterIcon} alt=\"licznik prądu\" width={300} />\r\n      </div>\r\n      </Col>\r\n      <Col>\r\n        \r\n        <section className={styles.containerData}>\r\n        <div>\r\n        <span className={styles.title}>Data: </span><span>{`${moment().format('L')} ${moment().format('LTS')}`}</span>\r\n        </div>\r\n        \r\n        <div>\r\n        <span className={styles.title}>Adres PPE </span><span>00-000 Miasto, ulica 1/2</span>\r\n        </div>\r\n        \r\n        <div>\r\n        <span className={styles.title}>Sprzedawca </span><span>Energa-Obrót SA</span>\r\n        </div>\r\n     \r\n        <div>\r\n        <span className={styles.title}>Okres umowy </span><span>Od 2013-01-01</span>\r\n        </div>\r\n     \r\n        <div>\r\n        <span className={styles.title}>Numer PPE </span><span>PL003700000000009</span>\r\n        </div>\r\n     \r\n        <div>\r\n        <span className={styles.title}>Taryfa </span><span>G12</span>\r\n        </div>\r\n       \r\n        <div>\r\n        <span className={styles.title}>Aktualne zużycie </span><span>{`${currentConsumption.toFixed(2)} kWh/doba`}</span>\r\n        </div>\r\n        <div>\r\n        <span className={styles.title}>Minimalne zużycie w ciągu dnia </span><span>{`0.05 kWh/doba`}</span>\r\n        </div>\r\n        <div>\r\n        <span className={styles.title}>Maksymalne zużycie w ciągu dnia </span><span>{`2.97 kWh/doba`}</span>\r\n        </div>\r\n\r\n        <div className={styles.zoneContainer}>\r\n          <span onClick={()=>setNightZone(false)}>Strefa dzienna</span>\r\n        <Switch\r\n            checked={nightZone}\r\n            onChange={handleChangeSwitch}\r\n            onColor=\"#86d3ff\"\r\n            onHandleColor=\"#2693e6\"\r\n            handleDiameter={30}\r\n            uncheckedIcon={false}\r\n            checkedIcon={false}\r\n            boxShadow=\"0px 1px 5px rgba(0, 0, 0, 0.6)\"\r\n            activeBoxShadow=\"0px 0px 1px 10px rgba(0, 0, 0, 0.2)\"\r\n            height={20}\r\n            width={48}\r\n            className=\"react-switch\"\r\n            id=\"material-switch\"\r\n          />\r\n          <span onClick={()=>setNightZone(true)}>Strefa nocna</span>\r\n          </div>\r\n        </section>\r\n      </Col>\r\n      </Row>\r\n      </Container>\r\n    </main>\r\n  )\r\n}\r\nexport default ElectricityMeter","  \r\nconst routes = {\r\n  main: '/electricity-meter',\r\n  dashboard: '/dashboard',\r\n};\r\n\r\nexport default routes","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport routes from 'routes';\r\nimport './Navbar.sass';\r\n\r\nconst Navbar: React.FC = () => {\r\n  return (\r\n    <nav className={`navbar navbar-light nav-bg`}>\r\n      <ul className=\"navbar-nav nav-wrap\">\r\n        <li className=\"nav-item active\">\r\n          <NavLink to={routes.main} className=\"nav-link\" activeClassName='active-nav'>\r\n            LICZNIK\r\n          </NavLink>\r\n        </li>\r\n        <li className=\"nav-item active\">\r\n          <NavLink to={routes.dashboard} className=\"nav-link\" activeClassName='active-nav'>\r\n            WYKRESY\r\n          </NavLink>\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n  );\r\n};\r\nexport default Navbar;","import Dashboard from \"./components/Dashboard\"\nimport ElectricityMeter from \"./components/ElectricityMeter\"\nimport React from \"react\"\nimport { Route, Switch, BrowserRouter as Router } from \"react-router-dom\"\nimport routes from \"routes\"\nimport Navbar from \"./components/Navbar\"\n\n\ninterface AppProps {\n  \n}\n\nconst App: React.FC<AppProps> = (props) => {\n\n\n\n  return(\n    <Router>\n      <Navbar/>\n    <Switch>\n      <Route exact path={routes.main} component={ElectricityMeter} />\n      <Route exact path={routes.dashboard} component={Dashboard} />\n\n    </Switch>\n  </Router>\n  )\n//   const [date,setDate]=useState(new Date());\n\n//   const [currentConsumption,setCurrentConsumption] = useState(0.85);\n//   const [nightZone,setNightZone]=useState(false);\n\n//   useEffect(()=>{\n//       // const timer = setInterval(()=> setDate(new Date()),1000);\n//     const minRange = 0.2;\n//     const maxRange = 2;\n//     const timer = setInterval(()=> setCurrentConsumption(getRndInteger(minRange,maxRange)),1000)\n//      return function cleanup(){\n//        clearInterval(timer)\n//      } \n//   },[currentConsumption])\n\n//   const getRndInteger = (min:number, max:number) => {\n//     return Math.random() * (max - min + 0.5);\n//   }\n\n//   const handleChangeSwitch = ()=>{\n// setNightZone(prev=>!prev)\n//   }\n\n//   return (\n//     <main className={styles.mainWrap} style={{background:`url(${Background})`}}>\n//       <Container>\n//         <Row>\n//           <Col>\n//       <h5>Licznik <b>V705048953698419</b></h5>\n//       <div>\n//         <img src={ElectricityMeterIcon} alt=\"licznik prądu\" width={300} />\n//       </div>\n//       </Col>\n//       <Col>\n        \n//         <section className={styles.containerData}>\n//         <div>\n//         <span className={styles.title}>Data: </span><span>{`${moment().format('L')} ${moment().format('LTS')}`}</span>\n//         </div>\n        \n//         <div>\n//         <span className={styles.title}>Adres PPE </span><span>00-000 Miasto, ulica 1/2</span>\n//         </div>\n        \n//         <div>\n//         <span className={styles.title}>Sprzedawca </span><span>Energa-Obrót SA</span>\n//         </div>\n     \n//         <div>\n//         <span className={styles.title}>Okres umowy </span><span>Od 2013-01-01</span>\n//         </div>\n     \n//         <div>\n//         <span className={styles.title}>Numer PPE </span><span>PL003700000000009</span>\n//         </div>\n     \n//         <div>\n//         <span className={styles.title}>Taryfa </span><span>G12</span>\n//         </div>\n       \n//         <div>\n//         <span className={styles.title}>Aktualne zużycie </span><span>{`${currentConsumption.toFixed(2)} kWh/doba`}</span>\n//         </div>\n//         <div>\n//         <span className={styles.title}>Minimalne zużycie w ciągu dnia </span><span>{`0.06 kWh/doba`}</span>\n//         </div>\n//         <div>\n//         <span className={styles.title}>Maksymalne zużycie w ciągu dnia </span><span>{`2.95 kWh/doba`}</span>\n//         </div>\n\n//         <div className={styles.zoneContainer}>\n//           <span onClick={()=>setNightZone(false)}>Strefa dzienna</span>\n//         <Switch\n//             checked={nightZone}\n//             onChange={handleChangeSwitch}\n//             onColor=\"#86d3ff\"\n//             onHandleColor=\"#2693e6\"\n//             handleDiameter={30}\n//             uncheckedIcon={false}\n//             checkedIcon={false}\n//             boxShadow=\"0px 1px 5px rgba(0, 0, 0, 0.6)\"\n//             activeBoxShadow=\"0px 0px 1px 10px rgba(0, 0, 0, 0.2)\"\n//             height={20}\n//             width={48}\n//             className=\"react-switch\"\n//             id=\"material-switch\"\n//           />\n//           <span onClick={()=>setNightZone(true)}>Strefa nocna</span>\n//           </div>\n//         </section>\n//       </Col>\n//       </Row>\n//       </Container>\n//     </main>\n//   )\n}\nexport default App","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainWrap\":\"App_mainWrap__3cU5K\",\"title\":\"App_title__2IKHo\",\"containerData\":\"App_containerData__3B-Ea\",\"zoneContainer\":\"App_zoneContainer__2cvoh\",\"calendarBgc\":\"App_calendarBgc__S-PA8\"};"],"sourceRoot":""}